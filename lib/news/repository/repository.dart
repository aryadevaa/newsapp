import 'dart:async';
import 'package:dio/dio.dart';
import 'package:newsapp/news/model/article_response.dart'; // Ganti ini dengan model Autogenerated
import 'package:newsapp/news/model/source_response.dart';

class NewsRepository {
  static String mainUrl = "https://newsapi.org/v2/";
  final String apiKey = "26161da27cf54f5faf55fcf69827bfb3";

  final Dio _dio = Dio(
    BaseOptions(
      validateStatus: (status) {
        return status! < 500;
      },
    ),
  );

  var getSourcesUrl = '$mainUrl/sources';
  var getTopHeadlinesUrl = '$mainUrl/top-headlines';
  var everythingUrl = "$mainUrl/everything";

  // Method to get news sources
  Future<SourceResponse> getSources() async {
    var params = {"apiKey": apiKey, "language": "en", "country": "us"};
    try {
      Response response = await _dio.get(
        getSourcesUrl,
        queryParameters: params,
      );

      // Log response data for debugging
      print("Response Data (Sources): ${response.data}");

      // Check if response data is not null and valid
      if (response.data != null && response.data['sources'] != null) {
        return SourceResponse.fromJson(response.data);
      } else {
        return SourceResponse.withError("No sources data available");
      }
    } catch (error, stacktrace) {
      print("Exception occurred: $error stackTrace: $stacktrace");
      return SourceResponse.withError("Error: $error");
    }
  }

  // Method to get top headlines
  Future<ArticleResponse> getTopHeadlines({String? category, String? country}) async {
    var params = {"apiKey": apiKey, "country": country ?? 'us', "category": category};
    try {
      Response response = await _dio.get(
        getTopHeadlinesUrl,
        queryParameters: params,
      );

      // Log response data for debugging
      print("Response Data (Top Headlines): ${response.data}");

      // Convert the response to Autogenerated model (ArticleResponse)
      if (response.data != null && response.data['articles'] != null) {
        ArticleResponse articleResponse = ArticleResponse.fromJson(response.data);
        return ArticleResponse.fromJson(articleResponse.toJson());
      } else {
        return ArticleResponse.withError("No top headlines available");
      }
    } catch (error, stacktrace) {
      print("Exception occurred: $error stackTrace: $stacktrace");
      return ArticleResponse.withError("Error: $error");
    }
  }

  // Method to get everything based on a search query
  Future<ArticleResponse> getEverything(String query) async {
    var params = {"apiKey": apiKey, "q": query};
    try {
      Response response = await _dio.get(
        everythingUrl,
        queryParameters: params,
      );

      // Log response data for debugging
      print("Response Data (Everything): ${response.data}");

      // Check if response data is not null and valid
      if (response.data != null && response.data['articles'] != null) {
        ArticleResponse articleResponse = ArticleResponse.fromJson(response.data);
        return ArticleResponse.fromJson(articleResponse.toJson());
      } else {
        return ArticleResponse.withError("No results found for your query");
      }
    } catch (error, stacktrace) {
      print("Exception occurred: $error stackTrace: $stacktrace");
      return ArticleResponse.withError("Error: $error");
    }
  }
}
